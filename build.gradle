import org.gradle.api.artifacts.maven.MavenDeployment
import org.gradle.model.internal.core.ModelPath
import org.gradle.model.internal.type.ModelType
import org.gradle.platform.base.ComponentSpecContainer

println """\
Welcome to Gradle $gradle.gradleVersion - http://www.gradle.org
Gradle home is set to: $gradle.gradleHomeDir
Gradle user directory is set to: $gradle.gradleUserHomeDir

Base directory: $projectDir
Running script ${relativePath(buildFile)}
"""

if (file("vendor/protobuf").list().length == 0) {
  throw new GradleException(
    "You forgot to sync the submodule for protobuf. Please execute \"git submodule init && git submodule update\".")
}

apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'git'
apply plugin: 'com.jfrog.bintray'
apply plugin: "com.gradle.plugin-publish"

apply plugin: 'signing'

group = 'com.google.protobuf'
version = '0.7.2-SNAPSHOT'

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'org.ajoberstar:gradle-git:0.1.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:0.5'
        classpath "com.gradle.publish:plugin-publish-plugin:0.9.0"
        classpath 'junit:junit:4.7'
    }
}

subprojects {
  buildscript {
    repositories {
      jcenter()
      mavenLocal()
    }
    dependencies {
      classpath "com.google.protobuf:protobuf-gradle-plugin:${rootProject.version}"
    }
  }
  repositories {
    mavenCentral()
    jcenter()
  }
}

repositories {
    mavenLocal()
    mavenCentral()
}

// Write the plugin's classpath to a file to share with the tests
task createClasspathManifest {
  def outputDir = file("$buildDir/$name")

  inputs.files sourceSets.main.runtimeClasspath
  outputs.dir outputDir

  doLast {
    outputDir.mkdirs()
    file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
  }
}

tasks.test.dependsOn tasks.createClasspathManifest
if (findProject(':vendor') != null) {
  def vendorModelRegistry = project.evaluationDependsOn(':vendor').getModelRegistry()

  // We just want this path to be realize so we ignore the return type
  vendorModelRegistry.realizeNode(ModelPath.path('components'))
  def protoc = vendorModelRegistry.find(ModelPath.path('components.protoc.binaries.protocExecutable'), ModelType.of(NativeExecutableBinarySpec.class))
  def protobuf = vendorModelRegistry.find(ModelPath.path('components.protobuf.binaries.protobufStaticLibrary'), ModelType.of(StaticLibraryBinarySpec.class))
  def protobufLite = vendorModelRegistry.find(ModelPath.path('components.protobufLite.binaries.protobufLiteStaticLibrary'), ModelType.of(StaticLibraryBinarySpec.class))

  // Depends on the protoc binary
  tasks.test.dependsOn protoc, protobuf, protobufLite
}

dependencies {
    compile gradleApi()
    testCompile group: 'junit', name: 'junit', version: '4.8.1'
    testCompile gradleTestKit()
    testCompile 'org.spockframework:spock-core:1.0-groovy-2.3'
    testRuntime files(createClasspathManifest)
    compile localGroovy()
    compile 'com.google.gradle:osdetector-gradle-plugin:1.2.1'
    compile 'commons-lang:commons-lang:2.6'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.7'
}

task sourcesJar(type: Jar, dependsOn:classes) {
     classifier = 'sources'
     from sourceSets.main.allSource
}

task groovydocJar(type: Jar, dependsOn:groovydoc) {
     classifier = 'groovydoc'
     from groovydoc.destinationDir
}

task javadocJar(type: Jar, dependsOn:javadoc) {
     classifier = 'javadoc'
     from javadoc.destinationDir
}

artifacts {
     archives sourcesJar
     archives groovydocJar
     archives javadocJar
}

// The Gradle plugin portal doesn't allow signature files.
if (!gradle.startParameter.taskNames.intersect(['publishPlugins'])) {
  signing {
       required { isReleaseVersion }
       sign configurations.archives
  }
}

targetCompatibility = 1.6

uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        if (rootProject.hasProperty("ossrhUsername") && rootProject.hasProperty("ossrhPassword")) {
          authentication(userName: ossrhUsername, password: ossrhPassword)
        }
      }
      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        if (rootProject.hasProperty("ossrhUsername") && rootProject.hasProperty("ossrhPassword")) {
          authentication(userName: ossrhUsername, password: ossrhPassword)
        }
      }
      pom.project {
        name project.name
        description "Gradle build plugin to handle Protocol Buffers automated code generation and compilation"
        url "https://github.com/google/protobuf-gradle-plugin"
        licenses {
          license {
            name "BSD 3-Clause"
            url "http://opensource.org/licenses/BSD-3-Clause"
          }
        }
        developers {
          developer {
            id "zhangkun83"
            name "Kun Zhang"
            email "zhangkun@google.com"
          }
        }
        scm {
          connection "scm:git:git://github.com/google/protobuf-gradle-plugin.git"
          developerConnection "scm:git:git@github.com:google/protobuf-gradle-plugin.git"
          url "https://github.com/google/protobuf-gradle-plugin"
        }
      }
    }
  }
}

pluginBundle {
  website = 'https://github.com/google/protobuf-gradle-plugin'
  vcsUrl = 'https://github.com/google/protobuf-gradle-plugin'
  description = 'The Protobuf plugin provides protobuf compilation to your project.'

  plugins {
      protobufPlugin {
          id = 'com.google.protobuf'
          displayName = 'Protobuf Plugin for Gradle'
          tags = ['protobuf', 'protocol-buffers', 'protoc']
      }
  }
}

// Releases must be built on Java 1.7. Building on Java 1.8 will make the
// plugin runnable only on Java 1.8.
// See https://github.com/grpc/grpc-java/issues/805
task checkJavaVersion << {
  JavaVersion javaVersion = JavaVersion.current()
  if (!javaVersion.isJava7()) {
    throw new GradleException(
        "The plugin must be published under Java 1.7 but ${javaVersion} is found")
  }
}
[uploadArchives, publishPlugins]*.dependsOn checkJavaVersion

ext {
  // Shared test utility. Checks a JavaCompile task for the given sourceSet
  // includes the generated source dirs for the given codegenPlugins, and does
  // not include any other dirs under the generated code base dir.
  assertJavaCompileHasProtoGeneratedDir = {
      Project project, String sourceSet, JavaCompile compileJavaTask, Collection<String> codegenPlugins ->
    def baseDir = "${project.buildDir}/generated/source/proto/$sourceSet" as File
    // The expected direct subdirectories under baseDir
    def expectedDirs = codegenPlugins.collect { codegenPlugin ->
      "${project.buildDir}/generated/source/proto/$sourceSet/$codegenPlugin" as File
    } as Set

    def actualDirs = new HashSet()
    compileJavaTask.source.visit { fileVisitDetails ->
      // If the visited file is or is under a direct subdirectory of baseDir, add
      // that subdirectory to actualDirs.
      def file = fileVisitDetails.file
      while (true) {
        if (file.parentFile == baseDir) {
          actualDirs.add file
        }
        if (file.parentFile == null) {
          break
        }
        file = file.parentFile
      }
    }
    org.junit.Assert.assertEquals("sourceSet=${sourceSet}", expectedDirs, actualDirs)
  }
}